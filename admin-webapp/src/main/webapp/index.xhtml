<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:p="http://primefaces.org/ui">
<f:view contentType="text/html">
    <h:head>
        <script src="http://maps.google.com/maps/api/js" type="text/javascript"/>

        <h:outputScript>
            // <![CDATA[
            var polylines;

            function calcRoute() {
                var directionsService = new google.maps.DirectionsService();
                var directionsDisplay = new google.maps.DirectionsRenderer();
                var map = PF('gmap').getMap();
                polylines = {};

                // PF fitBounds fix Part 1
                // http://stackoverflow.com/questions/23060823/fitbounds-in-primefaces-gmap-component
                //remember the property set by PrimeFaces
                var tmp = map.fitBounds;
                //replace the code by the one provided by google maps api
                map.fitBounds = google.maps.Map.prototype.fitBounds;

                directionsDisplay.setMap(map);
                directionsDisplay.setOptions({suppressMarkers: true});
//                directionsDisplay.setPanel(document.getElementById("directionsPanel"));

                var routes = JSON.parse($(PrimeFaces.escapeClientId('#{p:component('routes')}')).attr("value"));
                for (var i = 0; i < routes.length; i++) {
                    var route = routes[i].waypoints;
                    var request = {
                        origin: route[0],
                        destination: route[route.length - 1],
                        waypoints: convertToWaypoints(route.slice(1, route.length - 1)),
                        travelMode: google.maps.TravelMode.DRIVING,
                        unitSystem: google.maps.UnitSystem.METRIC,
                        region: "at"
                    };

                    callDirectionsService = function (request, routeIdx) {
                        directionsService.route(request, function (response, status) {
                            if (status == google.maps.DirectionsStatus.OK) {
                                polylines[routes[routeIdx].vehicle.id] = createPolyline(response, map, routes[routeIdx]);
                            }
                        });
                    }
                    callDirectionsService(request, i);
                }

                // PF fitBounds fix Part 2
                //restore PrimeFaces property (probably PrimeFaces use it somehow)
                this.fitBounds = tmp;
            }

            google.maps.event.addDomListener(window, 'load', calcRoute);

            function convertToWaypoints(route) {
                var waypoints = new Array(route.length);
                for (var i = 0; i < route.length; i++) {
                    waypoints[i] = {
                        location: new google.maps.LatLng(route[i]["lat"], route[i]["lng"]),
                        stopover: false
                    };
                }
                return waypoints;
            }

            function createPolyline(directions, gmap, route) {
                var polyline = new google.maps.Polyline({
                    path: [],
                    strokeColor: route["color"],
                    strokeWeight: 3,
                    strokeOpacity: 0.5,
                    icons: [{
                        icon: {
                            path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW
                        },
                        repeat: '100px',
                        offset: '100%'
                    }],
                    map: gmap
                });

                var legs = directions.routes[0].legs;
                for (i = 0; i < legs.length; i++) {
                    var steps = legs[i].steps;
                    for (j = 0; j < steps.length; j++) {
                        var nextSegment = steps[j].path;
                        for (k = 0; k < nextSegment.length; k++) {
                            polyline.getPath().push(nextSegment[k]);
                            //bounds.extend(nextSegment[k]);
                        }
                    }
                }
                return polyline;
            }

            function incrementColor(color, step) {
                var colorToInt = parseInt(color.substr(1), 16),                     // Convert HEX color to integer
                        nstep = parseInt(step);                                         // Convert step to integer
                if (!isNaN(colorToInt) && !isNaN(nstep)) {                            // Make sure that color has been converted to integer
                    colorToInt += nstep;                                            // Increment integer with step
                    var ncolor = colorToInt.toString(16);                           // Convert back integer to HEX
                    ncolor = '#' + (new Array(7 - ncolor.length).join(0)) + ncolor;   // Left pad "0" to make HEX look like a color
                    if (/^#[0-9a-f]{6}$/i.test(ncolor)) {                             // Make sure that HEX is a valid color
                        return ncolor;
                    }
                }
                return color;
            };

            function onChange(event) {
                var options = event.target.options;
                var map = PF('gmap').getMap();
                for (var i = 0; i < options.length; i++) {
                    if (polylines[options[i].value]) {
                        if (options[i].selected) {
                            polylines[options[i].value].setMap(map);
                        } else {
                            polylines[options[i].value].setMap(null);
                        }
                    }
                }
            }

            // ]]>
        </h:outputScript>

        <h:outputStylesheet>
            html, body {
                height: 100%;
                width: 100%;
            }
        </h:outputStylesheet>
    </h:head>

    <p:ajaxStatus onstart="PF('statusDialog').show()" onsuccess="PF('statusDialog').hide()" />

    <p:dialog widgetVar="statusDialog" modal="true" draggable="false" closable="false" resizable="false" showHeader="false">
        <p:graphicImage name="/images/ajax-loader.gif" />
    </p:dialog>

    <ui:include src="dialogs.xhtml"/>

    <p:growl id="messages" globalOnly="true"/>

    <p:layout fullPage="true">
        <p:layoutUnit position="north">
            <h:outputLabel value="Plan"/>
        </p:layoutUnit>
        <p:layoutUnit position="west">
            <p:selectManyMenu id="vehicles" widgetVar="routeSelectionMenu"
                              onchange="onChange(event)"
                              showCheckbox="true"
                              value="#{planView.selectedVehicles}" converter="#{planView.vehicleConverter}" var="vehicle">
                <f:selectItems value="#{planView.vehicles}" var="vehicle" itemDisabled="#{empty vehicle.routeColor}" itemLabel="#{vehicle.description}" itemValue="#{vehicle}"/>

                <p:column>
                    <div style="width: 20px; height: 20px; background: #{vehicle.routeColor}"/>
                </p:column>
                <p:column>
                    <p:panelGrid columns="1">
                        <h:outputText value="#{vehicle.description}" />
                        <h:outputText value="#{vehicle.capacity}" />
                        <h:outputText value="#{vehicle.range} km" />
                    </p:panelGrid>
                </p:column>
            </p:selectManyMenu>
        </p:layoutUnit>
        <p:layoutUnit position="center">
            <h:form style="height: 100%">
                <p:commandButton value="Refresh Plan" icon="ui-icon-refresh"
                                 process="@this" update="mapGroup vehicles"
                                 actionListener="#{planView.reloadPlan}"
                                 oncomplete="calcRoute()"/>
                <h:panelGroup id="mapGroup">
                    <p:gmap widgetVar="gmap" type="HYBRID" center="#{planView.centerLatitude},#{planView.centerLongitude}"
                            zoom="15" streetView="true"
                            style="height: 100%;width: 100%;"
                            model="#{planView.mapModel}">
                        <p:ajax event="overlaySelect" listener="#{planView.onMarkerSelect}" />
                        <p:gmapInfoWindow id="infoWindow">
                            <p:outputPanel style="text-align: center; display: block; margin: auto">
                                <p:panelGrid columns="2">
                                    <p:outputLabel value="Name"/>
                                    <h:outputText value="#{planView.selectedMarker.data.name}" />

                                    <p:outputLabel value="Filling degree"/>
                                    <h:outputText value="#{planView.selectedMarker.data.fillingDegree * 100} %" />

                                    <p:outputLabel value="Payload"/>
                                    <h:outputText value="#{planView.selectedMarker.data.payload}" />

                                    <p:outputLabel value="Last updated"/>
                                    <h:outputText value="#{planView.selectedMarker.data.timestamp}" converter="localDateTimeConverter" />
                                </p:panelGrid>
                            </p:outputPanel>
                        </p:gmapInfoWindow>
                    </p:gmap>
                    <h:inputHidden id="routes" value="#{planView.routesAsJson}"/>
                </h:panelGroup>
            </h:form>

        </p:layoutUnit>
        <p:layoutUnit position="south" maxSize="500">
            <h:form>
                <p:commandButton value="Refresh Notifications" icon="ui-icon-refresh"
                                 process="@this" update="@next"
                                 actionListener="#{planView.reloadNotifications}"/>
                <p:dataTable value="#{planView.notifications}" var="notification"
                            >
                    <p:column headerText="Timestamp" style="width: 200px;">
                        <h:outputText value="#{notification.timestamp}" converter="localDateTimeConverter"/>
                    </p:column>
                    <p:column headerText="Content">
                        <div>
                            <span style="display: inline-block; vertical-align: middle; margin-right: 20px;" class="ui-icon ui-icon-alert"/>
                            <h:outputText value="#{notification.content}"/>
                        </div>
                    </p:column>
                    <p:column headerText="Action" style="width: 100px;">
                        <p:commandButton icon="ui-icon-gear" rendered="#{notification.notificationType eq 'GPS_CONFLICT' or notification.notificationType eq 'GPS_FAILURE'}"
                                         actionListener="#{fixedLocationDialogView.load(notification.wastebinId)}"
                                         oncomplete="PF('fixedLocationDialogVar').show()"
                                         update="fixedLocationDialog"/>
                    </p:column>
                </p:dataTable>
            </h:form>
        </p:layoutUnit>
    </p:layout>
    

</f:view>
</html>
